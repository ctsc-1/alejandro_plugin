<?php
require_once dirname(__FILE__) . '/class-ia-service.php';

/**
 * Service pour l'API Gemini de Google
 */
class Alejandro_Gemini_Service extends Alejandro_IA_Service {
    private $api_url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

    /**
     * Génère une réponse via l'API Gemini
     */
    public function generate_response($message) {
        try {
            $data = [
                'contents' => [
                    [
                        'parts' => [
                            ['text' => $this->get_system_prompt()],
                            ['text' => $message]
                        ]
                    ]
                ],
                'generationConfig' => [
                    'temperature' => 0.7,
                    'topK' => 40,
                    'topP' => 0.95,
                    'maxOutputTokens' => 1024,
                ],
                'safetySettings' => [
                    [
                        'category' => 'HARM_CATEGORY_HARASSMENT',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ],
                    [
                        'category' => 'HARM_CATEGORY_HATE_SPEECH',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ],
                    [
                        'category' => 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ],
                    [
                        'category' => 'HARM_CATEGORY_DANGEROUS_CONTENT',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ]
                ]
            ];

            $response = wp_remote_post($this->api_url . '?key=' . $this->api_key, [
                'headers' => [
                    'Content-Type' => 'application/json',
                ],
                'body' => json_encode($data),
                'timeout' => 30,
            ]);

            if (is_wp_error($response)) {
                throw new Exception('Erreur de communication avec Gemini: ' . $response->get_error_message());
            }

            $body = json_decode(wp_remote_retrieve_body($response), true);

            if (isset($body['error'])) {
                throw new Exception('Erreur Gemini: ' . $body['error']['message']);
            }

            if (!isset($body['candidates'][0]['content']['parts'][0]['text'])) {
                throw new Exception('Format de réponse Gemini invalide');
            }

            $response_text = $body['candidates'][0]['content']['parts'][0]['text'];
            
            // Ajouter au contexte
            $this->context[] = [
                'role' => 'user',
                'content' => $message
            ];
            $this->context[] = [
                'role' => 'assistant',
                'content' => $response_text
            ];

            return [
                'message' => $response_text,
                'actions' => $this->parse_actions($response_text)
            ];

        } catch (Exception $e) {
            $this->log_error($e->getMessage(), [
                'message' => $message,
                'language' => $this->language
            ]);
            throw $e;
        }
    }
}
